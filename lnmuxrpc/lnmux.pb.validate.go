// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lnmux.proto

package lnmuxrpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetInfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetInfoRequestValidationError is the validation error returned by
// GetInfoRequest.Validate if the designated constraints aren't met.
type GetInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInfoRequestValidationError) ErrorName() string { return "GetInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInfoRequestValidationError{}

// Validate checks the field values on GetInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PubKey

	// no validation rules for Network

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInfoResponseValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AutoSettle

	return nil
}

// GetInfoResponseValidationError is the validation error returned by
// GetInfoResponse.Validate if the designated constraints aren't met.
type GetInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInfoResponseValidationError) ErrorName() string { return "GetInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInfoResponseValidationError{}

// Validate checks the field values on NodeInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NodeInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PubKey

	return nil
}

// NodeInfoValidationError is the validation error returned by
// NodeInfo.Validate if the designated constraints aren't met.
type NodeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeInfoValidationError) ErrorName() string { return "NodeInfoValidationError" }

// Error satisfies the builtin error interface
func (e NodeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeInfoValidationError{}

// Validate checks the field values on AddInvoiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddInvoiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AmtMsat

	// no validation rules for Description

	// no validation rules for DescriptionHash

	// no validation rules for ExpirySecs

	return nil
}

// AddInvoiceRequestValidationError is the validation error returned by
// AddInvoiceRequest.Validate if the designated constraints aren't met.
type AddInvoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInvoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInvoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInvoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInvoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInvoiceRequestValidationError) ErrorName() string {
	return "AddInvoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddInvoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInvoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInvoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInvoiceRequestValidationError{}

// Validate checks the field values on AddInvoiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddInvoiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentRequest

	// no validation rules for Preimage

	// no validation rules for Hash

	return nil
}

// AddInvoiceResponseValidationError is the validation error returned by
// AddInvoiceResponse.Validate if the designated constraints aren't met.
type AddInvoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInvoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInvoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInvoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInvoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInvoiceResponseValidationError) ErrorName() string {
	return "AddInvoiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddInvoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInvoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInvoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInvoiceResponseValidationError{}

// Validate checks the field values on SubscribeInvoiceAcceptedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeInvoiceAcceptedRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubscribeInvoiceAcceptedRequestValidationError is the validation error
// returned by SubscribeInvoiceAcceptedRequest.Validate if the designated
// constraints aren't met.
type SubscribeInvoiceAcceptedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeInvoiceAcceptedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeInvoiceAcceptedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeInvoiceAcceptedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeInvoiceAcceptedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeInvoiceAcceptedRequestValidationError) ErrorName() string {
	return "SubscribeInvoiceAcceptedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeInvoiceAcceptedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeInvoiceAcceptedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeInvoiceAcceptedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeInvoiceAcceptedRequestValidationError{}

// Validate checks the field values on SubscribeInvoiceAcceptedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SubscribeInvoiceAcceptedResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	// no validation rules for SetId

	return nil
}

// SubscribeInvoiceAcceptedResponseValidationError is the validation error
// returned by SubscribeInvoiceAcceptedResponse.Validate if the designated
// constraints aren't met.
type SubscribeInvoiceAcceptedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeInvoiceAcceptedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeInvoiceAcceptedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeInvoiceAcceptedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeInvoiceAcceptedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeInvoiceAcceptedResponseValidationError) ErrorName() string {
	return "SubscribeInvoiceAcceptedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeInvoiceAcceptedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeInvoiceAcceptedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeInvoiceAcceptedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeInvoiceAcceptedResponseValidationError{}

// Validate checks the field values on WaitForInvoiceSettledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WaitForInvoiceSettledRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	return nil
}

// WaitForInvoiceSettledRequestValidationError is the validation error returned
// by WaitForInvoiceSettledRequest.Validate if the designated constraints
// aren't met.
type WaitForInvoiceSettledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitForInvoiceSettledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitForInvoiceSettledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitForInvoiceSettledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitForInvoiceSettledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitForInvoiceSettledRequestValidationError) ErrorName() string {
	return "WaitForInvoiceSettledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WaitForInvoiceSettledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitForInvoiceSettledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitForInvoiceSettledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitForInvoiceSettledRequestValidationError{}

// Validate checks the field values on WaitForInvoiceSettledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WaitForInvoiceSettledResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WaitForInvoiceSettledResponseValidationError is the validation error
// returned by WaitForInvoiceSettledResponse.Validate if the designated
// constraints aren't met.
type WaitForInvoiceSettledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitForInvoiceSettledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitForInvoiceSettledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitForInvoiceSettledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitForInvoiceSettledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitForInvoiceSettledResponseValidationError) ErrorName() string {
	return "WaitForInvoiceSettledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WaitForInvoiceSettledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitForInvoiceSettledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitForInvoiceSettledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitForInvoiceSettledResponseValidationError{}

// Validate checks the field values on SettleInvoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettleInvoiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	// no validation rules for SetId

	return nil
}

// SettleInvoiceRequestValidationError is the validation error returned by
// SettleInvoiceRequest.Validate if the designated constraints aren't met.
type SettleInvoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettleInvoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettleInvoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettleInvoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettleInvoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettleInvoiceRequestValidationError) ErrorName() string {
	return "SettleInvoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SettleInvoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettleInvoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettleInvoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettleInvoiceRequestValidationError{}

// Validate checks the field values on SettleInvoiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettleInvoiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SettleInvoiceResponseValidationError is the validation error returned by
// SettleInvoiceResponse.Validate if the designated constraints aren't met.
type SettleInvoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettleInvoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettleInvoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettleInvoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettleInvoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettleInvoiceResponseValidationError) ErrorName() string {
	return "SettleInvoiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SettleInvoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettleInvoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettleInvoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettleInvoiceResponseValidationError{}

// Validate checks the field values on CancelInvoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelInvoiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	// no validation rules for SetId

	return nil
}

// CancelInvoiceRequestValidationError is the validation error returned by
// CancelInvoiceRequest.Validate if the designated constraints aren't met.
type CancelInvoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelInvoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelInvoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelInvoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelInvoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelInvoiceRequestValidationError) ErrorName() string {
	return "CancelInvoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelInvoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelInvoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelInvoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelInvoiceRequestValidationError{}

// Validate checks the field values on CancelInvoiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelInvoiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelInvoiceResponseValidationError is the validation error returned by
// CancelInvoiceResponse.Validate if the designated constraints aren't met.
type CancelInvoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelInvoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelInvoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelInvoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelInvoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelInvoiceResponseValidationError) ErrorName() string {
	return "CancelInvoiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelInvoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelInvoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelInvoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelInvoiceResponseValidationError{}

// Validate checks the field values on ListInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInvoicesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxInvoicesCount

	// no validation rules for SequenceStart

	return nil
}

// ListInvoicesRequestValidationError is the validation error returned by
// ListInvoicesRequest.Validate if the designated constraints aren't met.
type ListInvoicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvoicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvoicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvoicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvoicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvoicesRequestValidationError) ErrorName() string {
	return "ListInvoicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvoicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvoicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvoicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvoicesRequestValidationError{}

// Validate checks the field values on ListInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInvoicesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInvoice() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInvoicesResponseValidationError{
					field:  fmt.Sprintf("Invoice[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for FirstSequenceNumber

	// no validation rules for LastSequenceNumber

	return nil
}

// ListInvoicesResponseValidationError is the validation error returned by
// ListInvoicesResponse.Validate if the designated constraints aren't met.
type ListInvoicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvoicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvoicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvoicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvoicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvoicesResponseValidationError) ErrorName() string {
	return "ListInvoicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvoicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvoicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvoicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvoicesResponseValidationError{}

// Validate checks the field values on Invoice with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Invoice) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	// no validation rules for Preimage

	// no validation rules for AmountMsat

	// no validation rules for Settled

	// no validation rules for SettledRequestedAt

	// no validation rules for SettledAt

	// no validation rules for SequenceNumber

	return nil
}

// InvoiceValidationError is the validation error returned by Invoice.Validate
// if the designated constraints aren't met.
type InvoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvoiceValidationError) ErrorName() string { return "InvoiceValidationError" }

// Error satisfies the builtin error interface
func (e InvoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvoiceValidationError{}
