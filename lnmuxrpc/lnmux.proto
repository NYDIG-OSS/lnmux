syntax = "proto3";

package lnmux;

option go_package = "github.com/bottlepay/lnmux/lnmuxrpc";

service Service {
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

    rpc AddInvoice (AddInvoiceRequest) returns (AddInvoiceResponse);

    rpc SubscribeInvoiceAccepted (SubscribeInvoiceAcceptedRequest) returns (stream SubscribeInvoiceAcceptedResponse);

    rpc WaitForInvoiceFinalEvent (WaitForInvoiceFinalEventRequest) returns (WaitForInvoiceFinalEventResponse);

    // Requests settlement for an accepted invoice. This call is idempotent.
    rpc SettleInvoice (SettleInvoiceRequest) returns (SettleInvoiceResponse);

    // Cancels an accepted invoice. In case settle has been requested
    // for an invoice, CancelInvoice returns a FailedPrecondition error.
    rpc CancelInvoice (CancelInvoiceRequest) returns (CancelInvoiceResponse);

    // Lists settled or to be settled invoices. It returns invoices with a sequence number between
    // 'sequence_start' and 'sequence_start' + max_invoices_count'.
    rpc ListInvoices(ListInvoicesRequest)  returns (ListInvoicesResponse);
}

message GetInfoRequest {}

message GetInfoResponse {
    bytes pub_key = 1;
    string network = 2;
    repeated NodeInfo nodes = 3;
    bool auto_settle = 4;
}

message NodeInfo {
    bytes pub_key = 1;
}

message AddInvoiceRequest {
    int64 amt_msat = 1;
    string description = 2;
    bytes description_hash = 3;
    int64 expiry_secs = 4;
}

message AddInvoiceResponse {
    string payment_request = 1;
    bytes preimage = 2;
    bytes hash = 3;
}

message SubscribeInvoiceAcceptedRequest {}

message SubscribeInvoiceAcceptedResponse {
    bytes hash = 1;
    bytes set_id = 2;
}

message WaitForInvoiceFinalEventRequest {
    bytes hash = 1;
}

message WaitForInvoiceFinalEventResponse {
    InvoiceStatus invoice_status = 1;
}

message SettleInvoiceRequest {
    bytes hash = 1;
    bytes set_id = 2;
}

message SettleInvoiceResponse {}

message CancelInvoiceRequest {
    bytes hash = 1;
    bytes set_id = 2;
}

message CancelInvoiceResponse {}

message ListInvoicesRequest {
    uint64 max_invoices_count = 1;
    uint64 sequence_start = 2;
}

message ListInvoicesResponse {
    repeated Invoice invoice = 1;
    uint64 first_sequence_number = 2;
    uint64 last_sequence_number = 3;
}

enum InvoiceStatus {
    UNKNOWN = 0;
    FAILED = 1;
    SETTLE_REQUESTED=2;
    SETTLED = 3;
}

message Invoice {
    bytes hash = 1;
    bytes preimage = 2;
    uint64 amount_msat = 3;
    InvoiceStatus status = 4;
    uint64 settle_requested_at = 5;
    uint64 finalized_at = 6;
    uint64 sequence_number = 7;
}