// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lnmux.proto

package lnmux_proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on AddInvoiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddInvoiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AmtMsat

	// no validation rules for Description

	// no validation rules for DescriptionHash

	// no validation rules for ExpirySecs

	// no validation rules for AutoSettle

	return nil
}

// AddInvoiceRequestValidationError is the validation error returned by
// AddInvoiceRequest.Validate if the designated constraints aren't met.
type AddInvoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInvoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInvoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInvoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInvoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInvoiceRequestValidationError) ErrorName() string {
	return "AddInvoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddInvoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInvoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInvoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInvoiceRequestValidationError{}

// Validate checks the field values on AddInvoiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddInvoiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentRequest

	// no validation rules for Preimage

	// no validation rules for Hash

	return nil
}

// AddInvoiceResponseValidationError is the validation error returned by
// AddInvoiceResponse.Validate if the designated constraints aren't met.
type AddInvoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInvoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInvoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInvoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInvoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInvoiceResponseValidationError) ErrorName() string {
	return "AddInvoiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddInvoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInvoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInvoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInvoiceResponseValidationError{}

// Validate checks the field values on SubscribeSingleInvoiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeSingleInvoiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	return nil
}

// SubscribeSingleInvoiceRequestValidationError is the validation error
// returned by SubscribeSingleInvoiceRequest.Validate if the designated
// constraints aren't met.
type SubscribeSingleInvoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSingleInvoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSingleInvoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSingleInvoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSingleInvoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSingleInvoiceRequestValidationError) ErrorName() string {
	return "SubscribeSingleInvoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSingleInvoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSingleInvoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSingleInvoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSingleInvoiceRequestValidationError{}

// Validate checks the field values on SubscribeSingleInvoiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeSingleInvoiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for State

	// no validation rules for CancelledReason

	return nil
}

// SubscribeSingleInvoiceResponseValidationError is the validation error
// returned by SubscribeSingleInvoiceResponse.Validate if the designated
// constraints aren't met.
type SubscribeSingleInvoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeSingleInvoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeSingleInvoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeSingleInvoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeSingleInvoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeSingleInvoiceResponseValidationError) ErrorName() string {
	return "SubscribeSingleInvoiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeSingleInvoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeSingleInvoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeSingleInvoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeSingleInvoiceResponseValidationError{}

// Validate checks the field values on SettleInvoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettleInvoiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	return nil
}

// SettleInvoiceRequestValidationError is the validation error returned by
// SettleInvoiceRequest.Validate if the designated constraints aren't met.
type SettleInvoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettleInvoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettleInvoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettleInvoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettleInvoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettleInvoiceRequestValidationError) ErrorName() string {
	return "SettleInvoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SettleInvoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettleInvoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettleInvoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettleInvoiceRequestValidationError{}

// Validate checks the field values on SettleInvoiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SettleInvoiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SettleInvoiceResponseValidationError is the validation error returned by
// SettleInvoiceResponse.Validate if the designated constraints aren't met.
type SettleInvoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettleInvoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettleInvoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettleInvoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettleInvoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettleInvoiceResponseValidationError) ErrorName() string {
	return "SettleInvoiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SettleInvoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettleInvoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettleInvoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettleInvoiceResponseValidationError{}

// Validate checks the field values on CancelInvoiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelInvoiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	return nil
}

// CancelInvoiceRequestValidationError is the validation error returned by
// CancelInvoiceRequest.Validate if the designated constraints aren't met.
type CancelInvoiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelInvoiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelInvoiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelInvoiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelInvoiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelInvoiceRequestValidationError) ErrorName() string {
	return "CancelInvoiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelInvoiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelInvoiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelInvoiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelInvoiceRequestValidationError{}

// Validate checks the field values on CancelInvoiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelInvoiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelInvoiceResponseValidationError is the validation error returned by
// CancelInvoiceResponse.Validate if the designated constraints aren't met.
type CancelInvoiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelInvoiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelInvoiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelInvoiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelInvoiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelInvoiceResponseValidationError) ErrorName() string {
	return "CancelInvoiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelInvoiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelInvoiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelInvoiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelInvoiceResponseValidationError{}
