// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bottlepay/lnmux/lnd (interfaces: LndClient)

// Package lnd is a generated GoMock package.
package lnd

import (
	context "context"
	reflect "reflect"

	common "github.com/bottlepay/lnmux/common"
	types "github.com/bottlepay/lnmux/types"
	chaincfg "github.com/btcsuite/btcd/chaincfg"
	gomock "github.com/golang/mock/gomock"
	chainrpc "github.com/lightningnetwork/lnd/lnrpc/chainrpc"
	routerrpc "github.com/lightningnetwork/lnd/lnrpc/routerrpc"
)

// MockLndClient is a mock of LndClient interface.
type MockLndClient struct {
	ctrl     *gomock.Controller
	recorder *MockLndClientMockRecorder
}

// MockLndClientMockRecorder is the mock recorder for MockLndClient.
type MockLndClientMockRecorder struct {
	mock *MockLndClient
}

// NewMockLndClient creates a new mock instance.
func NewMockLndClient(ctrl *gomock.Controller) *MockLndClient {
	mock := &MockLndClient{ctrl: ctrl}
	mock.recorder = &MockLndClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLndClient) EXPECT() *MockLndClientMockRecorder {
	return m.recorder
}

// HtlcInterceptor mocks base method.
func (m *MockLndClient) HtlcInterceptor(arg0 context.Context) (func(*routerrpc.ForwardHtlcInterceptResponse) error, func() (*routerrpc.ForwardHtlcInterceptRequest, error), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HtlcInterceptor", arg0)
	ret0, _ := ret[0].(func(*routerrpc.ForwardHtlcInterceptResponse) error)
	ret1, _ := ret[1].(func() (*routerrpc.ForwardHtlcInterceptRequest, error))
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HtlcInterceptor indicates an expected call of HtlcInterceptor.
func (mr *MockLndClientMockRecorder) HtlcInterceptor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HtlcInterceptor", reflect.TypeOf((*MockLndClient)(nil).HtlcInterceptor), arg0)
}

// HtlcNotifier mocks base method.
func (m *MockLndClient) HtlcNotifier(arg0 context.Context) (func() (*routerrpc.HtlcEvent, error), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HtlcNotifier", arg0)
	ret0, _ := ret[0].(func() (*routerrpc.HtlcEvent, error))
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HtlcNotifier indicates an expected call of HtlcNotifier.
func (mr *MockLndClientMockRecorder) HtlcNotifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HtlcNotifier", reflect.TypeOf((*MockLndClient)(nil).HtlcNotifier), arg0)
}

// LookupHtlc mocks base method.
func (m *MockLndClient) LookupHtlc(arg0 context.Context, arg1 types.CircuitKey) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupHtlc", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupHtlc indicates an expected call of LookupHtlc.
func (mr *MockLndClientMockRecorder) LookupHtlc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupHtlc", reflect.TypeOf((*MockLndClient)(nil).LookupHtlc), arg0, arg1)
}

// Network mocks base method.
func (m *MockLndClient) Network() *chaincfg.Params {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(*chaincfg.Params)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockLndClientMockRecorder) Network() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockLndClient)(nil).Network))
}

// PubKey mocks base method.
func (m *MockLndClient) PubKey() common.PubKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubKey")
	ret0, _ := ret[0].(common.PubKey)
	return ret0
}

// PubKey indicates an expected call of PubKey.
func (mr *MockLndClientMockRecorder) PubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubKey", reflect.TypeOf((*MockLndClient)(nil).PubKey))
}

// RegisterBlockEpochNtfn mocks base method.
func (m *MockLndClient) RegisterBlockEpochNtfn(arg0 context.Context) (chan *chainrpc.BlockEpoch, chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBlockEpochNtfn", arg0)
	ret0, _ := ret[0].(chan *chainrpc.BlockEpoch)
	ret1, _ := ret[1].(chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterBlockEpochNtfn indicates an expected call of RegisterBlockEpochNtfn.
func (mr *MockLndClientMockRecorder) RegisterBlockEpochNtfn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBlockEpochNtfn", reflect.TypeOf((*MockLndClient)(nil).RegisterBlockEpochNtfn), arg0)
}
